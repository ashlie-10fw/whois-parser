# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   /spec/fixtures/responses/joburg-whois.registry.net.za/joburg/status_registered.expected
#
# and regenerate the tests with the following rake task
#
#   $ rake spec:generate
#

require 'spec_helper'

describe "joburg-whois.registry.net.za", :aggregate_failures do

  subject do
    file = fixture("responses", "joburg-whois.registry.net.za/joburg/status_registered.txt")
    part = Whois::Record::Part.new(body: File.read(file), host: "joburg-whois.registry.net.za")
    Whois::Parser.parser_for(part)
  end

  it "matches status_registered.expected" do
    expect(subject.domain).to eq("usedautos.joburg")
    expect(subject.domain_id).to eq("dom_7P-9999")
    expect(subject.status).to eq(:registered)
    expect(subject.available?).to eq(false)
    expect(subject.registered?).to eq(true)
    expect(subject.created_on).to be_a(Time)
    expect(subject.created_on).to eq(DateTime.parse("2014-11-03 22:00:08 UTC"))
    expect(subject.updated_on).to be_a(Time)
    expect(subject.updated_on).to eq(DateTime.parse("2014-11-10 07:08:28 UTC"))
    expect(subject.expires_on).to be_a(Time)
    expect(subject.expires_on).to eq(DateTime.parse("2015-11-03 22:00:08 UTC"))
    expect(subject.registrar).to be_a(Whois::Parser::Registrar)
    expect(subject.registrar.id).to eq("1466")
    expect(subject.registrar.name).to eq("Lexsynergy")
    expect(subject.registrar.url).to eq(nil)
    expect(subject.registrant_contacts).to be_a(Array)
    expect(subject.registrant_contacts.size).to eq(1)
    expect(subject.registrant_contacts[0]).to be_a(Whois::Parser::Contact)
    expect(subject.registrant_contacts[0].type).to eq(Whois::Parser::Contact::TYPE_REGISTRANT)
    expect(subject.registrant_contacts[0].id).to eq("LEX-5FP-22YL")
    expect(subject.registrant_contacts[0].name).to eq("Domain Administrator")
    expect(subject.registrant_contacts[0].organization).to eq("The Car Trader (Pty) Ltd")
    expect(subject.registrant_contacts[0].address).to eq("154 Bram Fischer Drive Randburg")
    expect(subject.registrant_contacts[0].city).to eq("Johannesburg")
    expect(subject.registrant_contacts[0].zip).to eq("2194")
    expect(subject.registrant_contacts[0].country).to eq(nil)
    expect(subject.registrant_contacts[0].country_code).to eq("ZA")
    expect(subject.registrant_contacts[0].phone).to eq("+27.116860900")
    expect(subject.registrant_contacts[0].fax).to eq("+27.117896449")
    expect(subject.registrant_contacts[0].email).to eq("domains@autotrader.co.za")
    expect(subject.registrant_contacts[0].created_on).to eq(nil)
    expect(subject.registrant_contacts[0].updated_on).to eq(nil)
    expect(subject.admin_contacts).to be_a(Array)
    expect(subject.admin_contacts.size).to eq(1)
    expect(subject.admin_contacts[0]).to be_a(Whois::Parser::Contact)
    expect(subject.admin_contacts[0].type).to eq(Whois::Parser::Contact::TYPE_ADMINISTRATIVE)
    expect(subject.admin_contacts[0].id).to eq("LEX-5FP-22YL")
    expect(subject.admin_contacts[0].name).to eq("Domain Administrator")
    expect(subject.admin_contacts[0].organization).to eq("The Car Trader (Pty) Ltd")
    expect(subject.admin_contacts[0].address).to eq("154 Bram Fischer Drive Randburg")
    expect(subject.admin_contacts[0].city).to eq("Johannesburg")
    expect(subject.admin_contacts[0].zip).to eq("2194")
    expect(subject.admin_contacts[0].country).to eq(nil)
    expect(subject.admin_contacts[0].country_code).to eq("ZA")
    expect(subject.admin_contacts[0].phone).to eq("+27.116860900")
    expect(subject.admin_contacts[0].fax).to eq("+27.117896449")
    expect(subject.admin_contacts[0].email).to eq("domains@autotrader.co.za")
    expect(subject.admin_contacts[0].created_on).to eq(nil)
    expect(subject.admin_contacts[0].updated_on).to eq(nil)
    expect(subject.technical_contacts).to be_a(Array)
    expect(subject.technical_contacts.size).to eq(1)
    expect(subject.technical_contacts[0]).to be_a(Whois::Parser::Contact)
    expect(subject.technical_contacts[0].type).to eq(Whois::Parser::Contact::TYPE_TECHNICAL)
    expect(subject.technical_contacts[0].id).to eq("LEX-5FP-22YL")
    expect(subject.technical_contacts[0].name).to eq("Domain Administrator")
    expect(subject.technical_contacts[0].organization).to eq("The Car Trader (Pty) Ltd")
    expect(subject.technical_contacts[0].address).to eq("154 Bram Fischer Drive Randburg")
    expect(subject.technical_contacts[0].city).to eq("Johannesburg")
    expect(subject.technical_contacts[0].zip).to eq("2194")
    expect(subject.technical_contacts[0].country).to eq(nil)
    expect(subject.technical_contacts[0].country_code).to eq("ZA")
    expect(subject.technical_contacts[0].phone).to eq("+27.116860900")
    expect(subject.technical_contacts[0].fax).to eq("+27.117896449")
    expect(subject.technical_contacts[0].email).to eq("domains@autotrader.co.za")
    expect(subject.technical_contacts[0].created_on).to eq(nil)
    expect(subject.technical_contacts[0].updated_on).to eq(nil)
    expect(subject.nameservers).to be_a(Array)
    expect(subject.nameservers.size).to eq(3)
    expect(subject.nameservers[0]).to be_a(Whois::Parser::Nameserver)
    expect(subject.nameservers[0].name).to eq("ns1.lexsynergy.net")
    expect(subject.nameservers[0].ipv4).to eq(nil)
    expect(subject.nameservers[0].ipv6).to eq(nil)
    expect(subject.nameservers[1]).to be_a(Whois::Parser::Nameserver)
    expect(subject.nameservers[1].name).to eq("ns2.lexsynergy.us")
    expect(subject.nameservers[1].ipv4).to eq(nil)
    expect(subject.nameservers[1].ipv6).to eq(nil)
    expect(subject.nameservers[2]).to be_a(Whois::Parser::Nameserver)
    expect(subject.nameservers[2].name).to eq("ns3.lexsynergy.info")
    expect(subject.nameservers[2].ipv4).to eq(nil)
    expect(subject.nameservers[2].ipv6).to eq(nil)
  end
end
